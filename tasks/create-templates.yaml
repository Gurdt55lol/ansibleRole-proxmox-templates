- name: Create description for templates
  set_fact:
    dynamic_fact_for_{{ item.templateName | hash('sha1')}}: "This template is using the {{ importStorage }} storage and is configured with {{ templateMemory }} MB of RAM and {{ templateCores }} CPU cores."
  loop: "{{ cloudimgs | dict2items }}"
  loop_control:
    extended: true

- name: Create templates
  ansible.builtin.shell:
    cmd: qm create {{ templateID }} --memory {{ templateMemory }} --core {{ templateCores }} --name {{ item.name }} --net0 virtio,bridge=vmbr0 --description "{{ hostvars[inventory_hostname]['dynamic_fact_for_' + item.templateName |  hash('sha1')] }} {{ item.additionalDescription | default('') }}"
  register: command_result
  failed_when:
    - '"already exists" not in command_result.stderr'
    - command_result.rc != 0
  loop: "{{ cloudimgs | dict2items }}"

- name: copy ssh key to proxmox
  ansible.builtin.copy:
    content: "{{ sshkey }}"
    dest: "{{ isopath }}/id_rsa.pub"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: set cloud init settings
  ansible.builtin.script: "config.sh {{ item.templateID }} {{ ipconfig0 }} {{ isopath }}/id_rsa.pub {{ ciuser }} {{ importStorage }} {{ isopath }}/{{ item.name }}.qcow2"
  loop: "{{ cloudimgs | dict2items }}"
  register: config
  changed_when: "'Skipping' not in config.stdout"
  loop_control:
    extended: true

- name: convert to template
  ansible.builtin.shell:
    cmd: qm template {{ templateID }}
  loop: "{{ cloudimgs | dict2items }}"
  loop_control:
    extended: true